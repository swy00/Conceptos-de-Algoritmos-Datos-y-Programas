Realizar un programa que lea números que representan edades de personas hasta leer la edad -1. 
Finalizada la lectura se quiere informar cual fue la edad máxima leída.


Necesito una estructura que pueda ir agregando datos y 
por lo tanto su tamaño pueda ir variando en la ejecución del 
programa (estructura dinámica)

Es una colección de nodos. Cada nodo contiene un elemento 
(valor que se quiere almacenar en la lista) y una dirección de memoria 
dinámica que indica donde se  encuentra el siguiente nodo de la lista.  

Toda lista tiene un nodo inicial.

En memoria estática se declara una variable tipo PUNTERO 
(ya que son las única que pueden almacenar direcciones). 
La dirección almacenada en esa variable representa la dirección donde comienza la lista. 
Inicialmente ese puntero no contiene ninguna dirección.
Luego a medida que se quiere agregar elementos a la lista (nodo), 
se reserva una dirección de memoria dinámica y  
se carga el valor que se quiere guardar.
El último nodo de la lista indica que la dirección que le 
sigue es nil.

Cada vez que se necesite agregar un nodo se deberá reservar 
memoria dinámica (new) y cuando se quiera eliminar un nodo se debe 
liberar la memoria dinámica (dispose) .

<---------------------------------------->
Program uno;

Type 
  nombreTipo= ^nombreNodo;
     
  nombreNodo = record
       elemento: tipoElemento;
       punteroSig: nombreTipo;
  end;


Var 
  Pri: nombreTipo; 
<---------------------------------------->
LISTA DE ENTEROS
--> Program uno;

Type 
  listaE= ^nodo;
     
  nodo = record
       elemento: integer;
       punteroSig: listaE;
  end;


Var 
  Pri: listaE; 

Crear una lista quiere decir que la lista no tiene ningun elemento cargado, es decir no ocupa memoria
Al hacer new, se le asiga espacio en la memoria dinamica y por lo tanto significaria que posee algun valor

<---------------------------------------->
PROCEDIMIENTO PARA EL CREAR UNA LISTA

Program uno;

Type listaE= ^datosEnteros;
     
      datosEnteros= record
                     elem:integer;
                     sig:listaE;
                    end;
Procedure crear (var p: listaE);
begin
  p:= nil;
end;

Var 
  pri: listaE; 

Begin
  crear (pri);
End.
<---------------------------------------->
RECORRER UNA LISTA
Implica posicionarse al comienzo de la lista y a partir de allí ir 
“pasando” por cada elemento de la misma hasta llegar al final.

Inicializo una variable auxiliar con la dirección del puntero inicial de la lista

mientras (no sea el final de la lista)
   proceso el elemento (ej: imprimo, sumo, modifico)
   avanzo al siguiente elemento de auxiliar

<---------------------------------------->
procedure recorrerLista (pI: listaE);
Var
 aux:listaE; 

begin
  aux:= pI;
  while (aux^.sig <> nil) do
   begin
      write (aux^.elem);
      aux:= aux^.sig;
   end;
end;

Si la lista ingresa VACIA a este procedimiento esto no funciona, ya que el puntero de aux^.sig no existe
en la memoria dinamica
Y tampoco funciona si la lista posee UN solo elemento
Y si la lista tiene muchos elementos no imprime el último
<---------------------------------------->
FORMA CORRECTA DE ESCRIBIR EL proceso
procedure recorrerLista (pI: listaE);
Var
 aux:listaE; 

begin
  aux:= pI;
  while (aux <> nil) do
   begin
      write (aux^.elem);
      aux:= aux^.sig;
   end;
end;

En vez de mirar el aux del siguiente, me paro en el actual y veo si es NIL o no
<---------------------------------------->
ALTERNATIVA SIN USAR EL aux
procedure recorrerLista (pI: listaE);

begin
 while (pI <> nil) do
   begin
      write (pI^.elem);
      pI:= pI^.sig;
   end;
end;
<---------------------------------------->

AGREGAR ADELANTE

Implica generar un nuevo nodo y agregarlo como primer elemento de la lista. 

Para agregar siempre tengo que pedir un espacio de memoria dinamica

Implica generar un nuevo nodo y agregarlo como primer elemento de la lista. 

PASOS ---->
Reservo espacio en memoria nuevo elemento.

si (es el primer elemento a agregar)
  asigno al puntero inicial la dirección del nuevo elemento.

sino
  indico que el siguiente de nuevo elemento es el puntero inicial.
  actualizo el puntero inicial de la lista con la dirección del nuevo
  elemento.

Program uno;

Type listaE= ^datosEnteros;
     
     datosEnteros= record
                    elem:integer;
                    sig:listaE;
                   end;
Var 
  pri: listaE;
  num:integer;  {lo que se va a cargar}

Begin
  crear (pri); {pri va a pasar a valer nil }
  read (num);
  agregarAdelante (pri,num); {va a designarle una pos en memoria, y se le va a asigar el valor de num y el que le sigue será nil }
  read (num);
  agregarAdelante (pri,num); 
<---------------------------------------->
AGREGAR ADELANTE PROCESO
{pi es el puntero inicial de la list, y num el valor que quiero agregar}
procedure agregarAdelante (var pI:listaE; num:integer);
Var
 nuevo:listaE;
 
Begin
   new (nuevo);          {pido el nuevo espacio en memoria para el valor a agregar} 
   nuevo^.elem:= num;    {le cargo el valor a agregar} 
   nuevo^.sig:=nil;      {le cargo al puntero siguiente el valor nil}
   if (pI = nil) then    {Checkeo si la lista está vacia}
    pI:= nuevo           {en ese caso, el primer puntero le asigno el valor y al sig nil}
   else begin
        nuevo^.sig:= pI; {En caso de no estar vacia a mi nuevo nodo lo hago ser el pI, y el sig que era nil, será el pI original}
        pI:=nuevo;
       end;
End;

<---------------------------------------->
AGREGAR AL FINAL

Implica generar un nuevo nodo y agregarlo como último elemento de la lista. 

Pasos --->
Reservo espacio en memoria nuevo elemento.

si (es el primer elemento a agregar)
  asigno al puntero inicial la dirección del nuevo elemento.

sino
  inicializo un puntero auxiliar aux
  mientras (no llegue al último elemento)
   avanzo en la lista.
  actualizo como siguiente del último nodo al nuevo elemento
<---------------------------------------->
Program uno;

Type listaE= ^datosEnteros;
     
     datosEnteros= record
                    elem:integer;
                    sig:listaE;
                   end;
Var 
  pri: listaE;
  num:integer;  
Begin
  crear (pri);
  read (num);
  agregarAlFinal (pri,num); 
  read (num);
  agregarAlFinal (pri,num); 
<---------------------------------------->
AGREGAR AL FINAL proceso

procedure agregarAlFinal (var pI:listaE; num:integer);
Var
 nuevo,aux:listaE;  {la variable AUX me va a permitir recorrer la lista y encontrar el ultimo}
 
Begin
   new (nuevo);       {creo un nuevo espacio, le asigno el valor y al sig nil}
   nuevo^.elem:= num; 
   nuevo^.sig:=nil; 
    if (pI = nil) then {verifico si la lista es vacia}
      pI:= nuevo
    else begin          {Si no es VACIA}
      aux:= pI;         {comienzo en pI}
      while (aux ^.sig <> nil) do {mientras el sig <> nil, significa que mi lista sigue}
        aux:= aux^.sig;
      {al salir de este while, AUX queda parado en el último nodo}
      aux^.sig:=nuevo;    {aux al ser el ultimo, le asigno mi nuevo ULTIMO, el cual será [aux,nil]-->[num,nil]}   
      end;
End;
<---------------------------------------->
OPCION 2, en casos de listas muy grandes, el anterior AUX debe recorrerla toda

{voy a tener un puntero ULT, que cada vez que agrego un elemento se queda con esa direccion}
{por lo tanto al querer agregar un nuevo valor, solo tengo que asigarle el valor al ult^.sig:=nuevo}
{y luego obviamente pasar que ULT guarde esta nueva direccion}

Program uno;

Type listaE= ^datosEnteros;
     
     datosEnteros= record
                    elem:integer;
                    sig:listaE;
                   end;
Var 
  pri,ult: listaE;
  num:integer;  

Begin
  crear (pri,ult);
  read (num);
  agregarAlFinal2 (pri,ult,num); 
  read (num);
  agregarAlFinal2 (pri,,ult,num); 
<---------------------------------------->
AREGAR AL FINAL 2 proceso
procedure agregarAlFinal2 (var pI,pU:listaE; num:integer);
Var
 nuevo:listaE;
 
Begin
   new (nuevo); 
   nuevo^.elem:= num; 
   nuevo^.sig:=nil; 
    if (pI = nil) then begin
          pI:= nuevo;
          pU:= nuevo;
      end
      else begin
            pU^.sig:=nuevo;
            pU:= nuevo;       
          end;
End;

<---------------------------------------->
BUSCAR en una LISTA

Significa recorrer la lista desde el primer nodo buscando un valor que puede o no estar. 
Se debe tener en cuenta si la lista está o no ordenada.

LISTA DESORDENADA
---> Se debe recorrer toda la lista (en el peor de los casos), y 
detener la búsqueda en el momento que se encuentra el dato buscado o 
en el que la lista se terminó.

LISTA ordenada
--->Se debe recorrer la lista teniendo en cuenta el orden. 
La búsqueda se detiene cuando se termina la lista o el elemento buscado es 
mayor al elemento actual.

Cuando estoy recorriendo una lista y llego a NIL, significa que terminó y no encontró el elemento
<---------------------------------------->
<---------------------------------------->

BUSQUEDA LISTA DESORDENADA

Comienzo a recorrer la lista desde el nodo inicial.

mientras ((no sea el final de la lista)y(no encuentre el elemento))

   si (es el elemento buscado) entonces 
      detengo la búsqueda
   sino
     avanzo al siguiente elemento

Program uno;

Type listaE= ^datosEnteros;
     
     datosEnteros= record
                    elem:integer;
                    sig:listaE;
                   end;
Var 
  pri: listaE;
  num:integer;  
Begin
  crear (pri);
  cargar (pri); //se dispone
  read (num);
  if (buscar(pri,num)) then 
    write (“el elemento existe”);
End.
<---------------------------------------->

FUNCION DE BUSQUEDA LISTA DESORDENADA

function buscar (pI: listaE; valor:integer):boolean;
Var
 aux:listaE; 
 encontré:boolean;

Begin
  encontré:= false;
  aux:= pI;
  while ((aux <> nil) and (encontré = false)) do {Loopeo hasta llegar al final o se acabe la lista}
   begin
      if (aux^.elem = valor) then  
        encontré:=true
      else
        aux:= aux^.sig;
   end;
   buscar:= encontré; 
end;

<---------------------------------------->
<---------------------------------------->
BUSQUEDA LISTA ordenada

La diferencia es que no debo recorrer la lista hasta el final
Si el valor es mas chico que el valor donde estoy parado no debo seguir

function buscar (pI: listaE; valor:integer):boolean;
Var
 aux:listaE; 
 encontré:boolean;

Begin
  encontré:= false;
  aux:= pI;
  while ((aux <> nil) and (aux^.elem < valor)) do
   begin
      aux:= aux^.sig;
   end;
   {Tengo que checkear si se salió del while por aux=nil, o si fue porque encontró el valor}
   if (aux <> nil) and (aux^.elem = valor) then encontre:= true;
  
   buscar:= encontré; 
end;
<---------------------------------------->
<---------------------------------------->
ELIMINAR UN ELEMENTO 

Implica recorrer la lista desde el comienzo pasando nodo a nodo hasta encontrar el elemento 
y en ese momento eliminarlo (dispose). El elemento puede no estar en la lista.

Si la lista está DESORDENADA seguramente la búsqueda se realizará hasta encontrar el 
elemento o hasta que se termina la lista.

Si la lista está ORDENADA seguramente la búsqueda se realizará hasta que se termina la 
lista o no se encuentre un elemento mayor al buscado.

Existen 3 casos:
	CASO 1:que elemento a eliminar no se encuentre en la lista
	CASO 2:que elemento a eliminar sea el primero de la lista
	CASO 3:que elemento a eliminar no sea el primero en la lista     

Caso 1:
Recorrí toda la lista y el elemento a eliminar no se encuentra.
OBSERVAR QUE actual QUEDÓ EN nil


Caso 2:
Empiezo a recorrer la lista.
Mientras (no encuentro el elemento a borrar) y (no se termine la lista) 
	el puntero anterior toma la dirección del puntero actual
	avanzo el puntero actual
Como (el elemento está) y (es el primer elemento)
      actualizo el puntero inicial de la lista
      elimino la dirección del puntero actual
OBSERVAR QUE actual HABIA QUEDADO IGUAL A pri

Caso 3:
Empiezo a recorrer la lista.
Mientras (no encuentro el elemento a borrar) y (no se termine la lista) 
	el puntero anterior toma la dirección del puntero actual
	avanzo el puntero actual
Como (el elemento está) y (NO es el primer elemento)
      actualizo el siguiente del puntero anterior con el siguiente de actual
      elimino la dirección del puntero actual
OBSERVAR QUE actual HABIA QUEDADO <> nil y de pri

<---------------------------------------->
ELIMINAR EN UNA LISTA DESORDENADA

Comienzo a recorrer la lista desde el nodo inicial.

mientras ((no sea el final de la lista)y(no encuentre el elemento))

   el puntero anterior toma la dirección del puntero actual
   avanzo el puntero actual

si (encontré el elemento) entonces
	si (es el primer nodo) entonces
        actualizo el puntero inicial de la lista
      sino
	 actualizo el siguiente del puntero anterior con el siguiente de actual
      
      elimino la dirección del puntero actual

<---------------------------------------->
Program uno;

Type listaE= ^datosEnteros;
     
     datosEnteros= record
                    elem:integer;
                    sig:listaE;
                   end;
Var 
  pri: listaE;
  num:integer;  
Begin
  crear (pri);
  cargar (pri); //se dispone
  read (num);
  eliminar(pri,num);
End.
<---------------------------------------->
<---------------------------------------->
ELIMINAR LISTA DESORDENADA proceso, pero cortando al encontrar 1, deja afuera repeticiones

procedure eliminar (Var pI: listaE; valor:integer);
Var
 actual,ant:listaE;

Begin
  actual:=pI; 
  while (actual <> nil) and (actual^.elem <> valor) do begin
    ant:=actual; 
    actual:= actual^.sig;
  end;
  if (actual <> nil) then {si el elemento existe}
    if (actual = pI) then {caso de que sea el primer nodo de la lista}
      pI:= pI^.sig; 
    else                  {caso de no ser 1er nodo,hago el puente con el siguiente a donde esta parado actual}
     ant^.sig:= actual^.sig;
    
    dispose (actual);     {}
End;
<---------------------------------------->
<---------------------------------------->
ELIMINAR LISTA DESORDENADA proceso, teniendo en cuenta repeticiones
procedure eliminar (Var pI: listaE; valor:integer);
Var
 actual,ant:listaE;

Begin
  actual:=pI; 
  while (actual <> nil) do begin         {el while no frena hasta llegar al final}
    if (actual^.elem <> valor) then begin
     ant:=actual;  actual:= actual^.sig;
    end;
    else begin
      if (actual = pI) then 
        pI:= pI^.sig; 
      else
        ant^.sig:= actual^.sig;
      dispose (actual);                 {si encuentro un valor, lo elimino}
      actual:= ant;                     {le asigno nuevamente un valor a actual para poder seguir}
    end;
End;
<---------------------------------------->
<---------------------------------------->

INSERTAR EN UNA LISTA UN ELEMENTO

Implica agregar un nuevo nodo a una lista ordenada por algún criterio de manera que la lista siga quedando ordenada.
Existen 4 casos:
	  CASO 1: que la lista esté vacía.
	  CASO 2: que elemento vaya al comienzo de la lista (es menor al 1er nodo de la lista)
	  CASO 3: que elemento vaya al “medio” de la lista (es menor al último nodo de la lista)
    CASO 4: que elemento vaya al final de la lista (es mayor al último nodo de la lista)

CASO 1 ---> LISTA VACIA
Generar un nuevo nodo (NUEVO).
Asignar a la dirección del puntero inicial (PI) la del nuevo nodo (NUEVO)

CASO 2 --->lista NO vacia, VA AL PRINCIPIO
Generar un nuevo nodo (nuevo).Preparar punteros para el recorrido.
Asignar a la dirección del puntero siguiente del nuevo la dirección del nodo inicial (PI).
Actualizar con la dirección del nuevo nodo la dirección del puntero inicial (PI)
OBSERVAR QUE actual HABIA QUEDADO = pri

CASO 3 --->lista NO vacia, va al "medio"
Generar un nuevo nodo (nuevo). Preparo los punteros para el recorrido
Recorro hasta encontrar la posición
Reasigno punteros, el siguiente de anterior es NUEVO y el siguiente de NUEVO es actual.
OBSERVAR QUE actual HABIA QUEDADO <>  nil3

CASO 4 --->lista NO vacia, va al final
Generar un nuevo nodo (nuevo). Preparo los punteros para el recorrido
Recorro hasta encontrar la posición
Reasigno punteros, el siguiente de anterior es NUEVO y el siguiente de NUEVO es nil.
OBSERVAR QUE actual HABIA QUEDADO =  nil

<---------------------------------------->
LISTA VACIA           ---> pri=nil
ELEMENTO AL PRINCIPIO ---> actual=pri
ELEMENTO AL MEDIO     ---> actual <> nil
ELEMENTO AL FINAl     ---> actual = nil

Program uno;

Type listaE= ^datosEnteros;
     
     datosEnteros= record
                    elem:integer;
                    sig:listaE;
                   end;
Var 
  pri: listaE;
  num:integer;  
Begin
  crear (pri);
  cargar (pri); //se dispone
  read (num);
  insertar(pri,num);
End.
<---------------------------------------->
<---------------------------------------->
INSERTAR ELEMENTO proceso

procedure insertar (Var pI: listaE; valor:integer);
Var
 actual,anterior,nuevo:listaE;
Begin
  new (nuevo); nuevo^.elem:= valor; nuevo^.sig:=nil;
  if (pI = nil) then     pI:= nuevo
  
  else begin
    actual:= pI; ant:=pI;
    while (actual <> nil) and (actual^.elem < nuevo^.elem) do   
     begin
      anterior:=actual;
      actual:= actual^.sig;
     end;
  end;
  if (actual = pI) then 
  begin
   nuevo^.sig:= pI;   pI:= nuevo;
   end;
  else
  begin
    anterior^.sig:= nuevo;   nuevo^.sig:= actual;
    end;
End;
<---------------------------------------->
<---------------------------------------->